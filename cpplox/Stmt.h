// Path: /Users/rakeshkainthla/development/programming-language/cpplox//Stmt.h
// This file was automatically generated by generateAST.cpp
#pragma once
#include <any>
#include <memory>
#include <iostream>
#include <optional>
#include "./token.h"
#include "./Expr.h"
class If;
class Block;
class Expression;
class Print;
class Var;
class While;
using Stmt = std::variant<std::shared_ptr<If>, std::shared_ptr<Block>, std::shared_ptr<Expression>, std::shared_ptr<Print>, std::shared_ptr<Var>, std::shared_ptr<While>>;
class If {
	public:
	If(Expr condition, Stmt thenBranch, std::optional<Stmt> elseBranch) : condition(condition), thenBranch(thenBranch), elseBranch(elseBranch) {}
		const Expr condition;
		const Stmt thenBranch;
		const std::optional<Stmt> elseBranch;
};
class Block {
	public:
	Block(std::vector<Stmt> statements) : statements(statements) {}
		const std::vector<Stmt> statements;
};
class Expression {
	public:
	Expression(Expr expression) : expression(expression) {}
		const Expr expression;
};
class Print {
	public:
	Print(Expr expression) : expression(expression) {}
		const Expr expression;
};
class Var {
	public:
	Var(Token name, std::optional<Expr> initializer) : name(name), initializer(initializer) {}
		const Token name;
		const std::optional<Expr> initializer;
};
class While {
	public:
	While(Expr condition, Stmt body) : condition(condition), body(body) {}
		const Expr condition;
		const Stmt body;
};

