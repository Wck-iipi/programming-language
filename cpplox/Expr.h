// Path: /Users/rakeshkainthla/development/programming-language/cpplox//Expr.h
// This file was automatically generated by generateAST.cpp
#pragma once
#include "./token.h"
#include <any>
#include <iostream>
#include <memory>
#include <optional>
class Assign;
class Logical;
class Binary;
class Grouping;
class Literal;
class Unary;
class Variable;
using Expr = std::variant<std::shared_ptr<Assign>, std::shared_ptr<Logical>,
                          std::shared_ptr<Binary>, std::shared_ptr<Grouping>,
                          std::shared_ptr<Literal>, std::shared_ptr<Unary>,
                          std::shared_ptr<Variable>>;
class Assign {
public:
  Assign(Token left, Expr right) : left(left), right(right) {}
  const Token left;
  const Expr right;
};
class Logical {
public:
  Logical(Expr left, Token op, Expr right) : left(left), op(op), right(right) {}
  const Expr left;
  const Token op;
  const Expr right;
};
class Binary {
public:
  Binary(Expr left, Token op, Expr right) : left(left), op(op), right(right) {}
  const Expr left;
  const Token op;
  const Expr right;
};
class Grouping {
public:
  Grouping(Expr expression) : expression(expression) {}
  const Expr expression;
};
class Literal {
public:
  Literal(loxTypes value) : value(value) {}
  const loxTypes value;
};
class Unary {
public:
  Unary(Token op, Expr right) : op(op), right(right) {}
  const Token op;
  const Expr right;
};
class Variable {
public:
  Variable(Token name) : name(name) {}
  const Token name;
};
